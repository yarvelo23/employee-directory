{"version":3,"sources":["components/Navbar.js","components/EmployeeRow.js","utils/API.js","components/SearchBox.js","components/Titles.js","components/Search.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","EmployeeRow","props","src","img","alt","dob","name","phone","href","email","target","axios","get","SearchBox","placeholder","type","onChange","handleInput","Titles","onClick","click","Search","state","users","order","filterdUsers","loading","search","sorted","handleInputChange","event","searchEmployee","filter","first","toLowerCase","includes","last","cell","date","setState","value","handleSort","filtered","sort","a","b","console","log","map","picture","medium","moment","format","API","then","res","data","results","catch","err","this","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.33c1076e.chunk.js","sourcesContent":["import React from 'react';\nimport \"../styles/Navbar.css\";\n\nfunction Navbar() {\n    return (\n      <div className=\"card-header bg-dark text-white\">\n      Employee Directory\n      </div>\n\n    )\n\n}\n\nexport default Navbar;","import React from 'react';\nimport \"../styles/EmployeeRow.css\";\n\nfunction EmployeeRow(props) {\n    return ( \n      <div className=\"container\">\n      <div className=\"row\">\n          <div className=\"col-2 userImg\">\n            <img src={props.img} alt={props.dob}/>\n          </div>\n          <div className=\"col-2 userName\">\n              <p>\n                {props.name}\n              </p>\n          </div>\n          <div className=\"col-3 userPhone\">\n            <p>\n              {props.phone}\n            </p>\n          </div>\n          <div className=\"col-3 userEmail\">\n            <p>\n              <a href={\"mailto:\" + props.email} target=\"__blank\">\n                {props.email}\n              </a>\n                \n            </p>\n          </div>\n          <div className=\"col-2 userDob\">\n            <p>\n              {props.dob}\n            </p>\n          </div>\n      </div>\n  </div>\n\n                \n    )\n}\n\nexport default EmployeeRow;","\nimport axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=100\";\n\nexport default {\n  getEmployee: function() {\n      \n    return axios.get(BASEURL);\n  }\n};","import React from \"react\";\nimport \"../styles/SearchBox.css\"\n\nfunction SearchBox(props) {\n    return (\n        <div className=\"search\">\n            <input \n            placeholder=\"Search for Employee\"\n            type=\"search\"\n            onChange={props.handleInput} \n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from \"react\";\nimport \"../styles/Titles.css\"\n\nfunction Titles(props) {\n    return (\n        <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"col-2 image\">\n                Image\n            </div>\n            <div className=\"col-2 name\" onClick={props.click}>\n                Name\n            </div>\n            <div className=\"col-3 phone\">\n                Phone\n            </div>\n            <div className=\"col-3 email\" onClick={props.click}>\n                Email\n            </div>\n            <div className=\"col-2 dob\">\n                Date of Birth\n            </div>\n        </div>\n    </div>\n\n    )\n} \n\nexport default Titles;","import React, { Component } from \"react\";\nimport EmployeeRow from \"./EmployeeRow\";\nimport moment from \"moment\";\nimport API from \"../utils/API\";\nimport SearchBox from \"./SearchBox\";\nimport Titles from \"./Titles\";\n\nclass Search extends Component {\n    state = {\n        users: [{}],\n        order: \"descend\",\n        filterdUsers: [{}],\n        loading: true,\n        search: \"\",\n        sorted: false\n    };\n\n\n    handleInputChange = event => {\n        let { users, search } = this.state;\n        let searchEmployee = users.filter(sorted => {\n            return (\n               sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\n               sorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\n               sorted.email.toLowerCase().includes(search.toLowerCase()) ||\n               sorted.cell.toLowerCase().includes(search.toLowerCase()) ||\n               sorted.dob.date.toLowerCase().includes(search.toLowerCase()) \n\n            )\n        })\n            // console.log(event.target.value)\n            this.setState({ sorted: true })\n            this.setState({ search: event.target.value });\n            this.setState({ filterdUsers: searchEmployee });\n            // console.log(this.state.filterdUsers)\n    };\n\n\n    handleSort = () => {\n        if (this.state.order === \"descend\") {\n            this.setState({ order: \"asc\"})\n        } else {\n            this.setState({ order: \"descend\"})\n        }\n\n        \n        let { users, order } = this.state;\n\n        function compare( a, b ) {\n            if (order === \"asc\") {\n                if ( a.name.first < b.name.first )\n                {    return -1;  \n              }  \n              if ( a.name.last > b.name.last )\n              {    \n                  return 1;  \n              }  \n              return 0;\n            } else {\n                if ( a.name.first > b.name.first )\n                {    return -1;  \n              }  \n              if ( a.name.last < b.name.last )\n              {    \n                  return 1;  \n              }  \n              return 0;\n\n            }\n        \n        }\n        const filtered = users.sort( compare );\n                        \n        console.log(filtered)\n    }\n\n    searchEmployee = () => {\n        if (this.state.sorted) {\n            return <div>\n                {this.state.filterdUsers.map(users=> (\n                    <EmployeeRow\n                        key={users.dob.date}\n                        img={users.picture.medium}\n                        name={users.name.first + \" \" + users.name.last} \n                        phone={users.cell}\n                        email={users.email}\n                        dob={moment(users.dob.date).format(\"MM-DD-YYYY\")}\n                    />\n                ))}\n            </div>\n        }\n\n        else if(this.state.loading === false) {\n            return <div>\n                {this.state.users.map(users=> (\n                    <EmployeeRow\n                        key={users.dob.date}\n                        img={users.picture.medium}\n                        name={users.name.first + \" \" + users.name.last} \n                        phone={users.cell}\n                        email={users.email}\n                        dob={moment(users.dob.date).format(\"MM-DD-YYYY\")}\n                    /> \n            ))}\n        </div>\n\n        }\n        \n\n    }\n\n    componentDidMount() {\n        API.getEmployee()\n        .then(res =>  {\n            // console.log(res.data)\n            this.setState({ users: res.data.results, loading: false })\n        })\n        .catch(err => console.log(err));\n    }\n\n    render() {\n        return ( \n                \n                <div>\n                    <SearchBox handleInput={this.handleInputChange}/>\n                    <Titles click={this.handleSort}/>\n                    {this.searchEmployee()}\n                </div>    \n                 \n\n        )\n    }\n}\n\nexport default Search;","import React from \"react\";\nimport \"../styles/Footer.css\"\n\nfunction Footer() {\n    return (\n      <footer className=\"bg-dark footer text-white\">\n        <div className=\"card-header bg-dark text-white\">\n        &copy; FSC 2020\n        </div>\n\n      </footer>\n    );\n  }\n  \n  export default Footer;","import React from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Search from \"./components/Search\";\nimport Footer from \"./components/Footer\";\n\n\nfunction App() {\n  return(\n      <div className=\"flexbox-container\">\n        <Navbar />\n        <Search/>\n        <Footer/>\n      </div>\n    \n\n  \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}